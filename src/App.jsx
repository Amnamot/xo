// src/App.jsx v3
import React, { useEffect, useState } from "react";
import { BrowserRouter as Router, Routes, Route } from "react-router-dom";
import Loader from "./components/Loader";
import StartScreen from "./StartScreen";
import Game from "./Game";
import EndGame from "./components/EndGame";
import LostGame from "./components/LostGame";
import Loss from "./components/Loss";
import { initSocket, connectSocket, checkAndRestoreGameState } from './services/socket';

const App = () => {
  const [telegramId, setTelegramId] = useState(null);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ telegramId
  const getCurrentTelegramId = () => {
    return localStorage.getItem('current_telegram_id') || 'unknown';
  };

  useEffect(() => {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º telegramId –∏–∑ localStorage
    setTelegramId(getCurrentTelegramId());

    if (window.Telegram?.WebApp) {
      window.Telegram.WebApp.ready();
      
      // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
      window.Telegram.WebApp.onEvent('viewportChanged', async () => {
        const isExpanded = window.Telegram.WebApp.isExpanded;
        await connectSocket();
        const socket = initSocket();
        
        if (!isExpanded) {
          // –ü—Ä–∏ —Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
          socket.emit('uiState', { 
            state: 'minimized', 
            telegramId: getCurrentTelegramId(),
            details: { 
              lastScreen: window.location.pathname,
              timestamp: Date.now()
            }
          });
        } else {
          // –ü—Ä–∏ —Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
          try {
            const gameState = await checkAndRestoreGameState(getCurrentTelegramId());
            if (gameState?.gameId) {
              console.log('üîÑ [App] Restoring game after expand:', {
                gameId: gameState.gameId,
                timestamp: new Date().toISOString()
              });
              window.location.href = `/game/${gameState.gameId}`;
            }
          } catch (error) {
            console.warn('‚ö†Ô∏è [App] No active game found after expand:', {
              error: error.message,
              timestamp: new Date().toISOString()
            });
          }
        }
      });
    }

    // –°–ª–µ–¥–∏–º –∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ –≤ localStorage
    const handleStorageChange = (e) => {
      if (e.key === 'current_telegram_id') {
        setTelegramId(e.newValue || 'unknown');
      }
    };
    
    window.addEventListener('storage', handleStorageChange);
    return () => window.removeEventListener('storage', handleStorageChange);
  }, []);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è UI
  const emitUiState = (state, details = {}) => {
    const socket = initSocket();
    socket.emit('uiState', {
      state,
      telegramId: getCurrentTelegramId(),
      details
    });
  };

  return (
    <Router>
      <Routes>
        {/* –°—Ç–∞—Ä—Ç–æ–≤—ã–π —ç–∫—Ä–∞–Ω –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è */}
        <Route path="/" element={<Loader onMount={() => emitUiState('loader', { progress: 0 })} />} />

        {/* –≠–∫—Ä–∞–Ω –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ */}
        <Route path="/start" element={<StartScreen onMount={() => emitUiState('startScreen')} />} />

        {/* –ò–≥—Ä–æ–≤–æ–π —ç–∫—Ä–∞–Ω */}
        <Route path="/game" element={<Game />} /> {/* –î–ª—è —Å–æ–∑–¥–∞—Ç–µ–ª—è –ª–æ–±–±–∏ */}
        <Route path="/game/:lobbyId" element={<Game />} /> {/* –î–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è—é—â–µ–≥–æ—Å—è –∏–≥—Ä–æ–∫–∞ */}

        {/* –≠–∫—Ä–∞–Ω –ø–æ–±–µ–¥–∏—Ç–µ–ª—è */}
        <Route path="/end" element={<EndGame />} />

        {/* –≠–∫—Ä–∞–Ω –ø—Ä–æ–∏–≥—Ä–∞–≤—à–µ–≥–æ */}
        <Route path="/lost" element={<LostGame />} />

        {/* –≠–∫—Ä–∞–Ω –ø–æ—Ç–µ—Ä—è–Ω–Ω–æ–≥–æ –ª–æ–±–±–∏ */}
        <Route path="/nolobby" element={<Loss onMount={() => emitUiState('loss')} />} />
      </Routes>
    </Router>
  );
};

export default App;

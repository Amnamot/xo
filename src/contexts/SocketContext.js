import React, { createContext, useContext } from 'react';
import { io } from 'socket.io-client';

// –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
export const SocketContext = createContext();

// –°–æ–∑–¥–∞–µ–º —Ö—É–∫ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–æ–∫–µ—Ç–∞
export const useSocket = () => {
  const context = useContext(SocketContext);
  if (!context) {
    throw new Error('useSocket must be used within a SocketProvider');
  }
  return context;
};

// –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä
export const SocketProvider = ({ children }) => {
  const [socket, setSocket] = React.useState(null);

  // –§—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–æ–∫–µ—Ç–∞
  const initSocket = (telegramId) => {
    if (!telegramId) {
      console.error('‚ùå [SocketContext] Cannot initialize socket without telegramId');
      return;
    }

    console.log('üîå [SocketContext] Initializing socket with telegramId:', {
      telegramId,
      timestamp: new Date().toISOString()
    });

    const newSocket = io(process.env.REACT_APP_SOCKET_URL || 'https://api.igra.top/socket.io/', {
      transports: ['websocket'],
      query: { 
        initData: window.Telegram?.WebApp?.initData
      }
    });

    newSocket.on('connect', () => {
      console.log('‚úÖ [SocketContext] Socket connected:', {
        telegramId,
        socketId: newSocket.id,
        timestamp: new Date().toISOString()
      });

      // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
      const lastKnownState = localStorage.getItem('lastKnownState');
      const lastActionTimestamp = localStorage.getItem('lastActionTimestamp');

      newSocket.emit('restoreState', {
        telegramId,
        lastKnownState,
        lastActionTimestamp: lastActionTimestamp ? parseInt(lastActionTimestamp) : undefined
      });
    });

    newSocket.on('connect_error', (error) => {
      console.error('‚ùå [SocketContext] Socket connection error:', {
        error: error.message,
        telegramId,
        timestamp: new Date().toISOString()
      });
    });

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ gameState
    newSocket.on('gameState', (gameState) => {
      console.log('üìä [SocketContext] Game state received:', {
        gameState,
        socketId: newSocket.id,
        timestamp: new Date().toISOString()
      });
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
    newSocket.on('restoreState', (data) => {
      console.log('üîÑ [SocketContext] State restored:', {
        status: data.status,
        state: data.state,
        timestamp: new Date().toISOString()
      });

      if (data.status === 'success') {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        localStorage.setItem('lastKnownState', data.state);
        localStorage.setItem('lastActionTimestamp', Date.now().toString());

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        switch (data.state) {
          case 'game':
            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
            if (data.gameData) {
              // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è UI –∏–≥—Ä—ã
              console.log('üéÆ [SocketContext] Game state restored:', data.gameData);
            }
            break;

          case 'lobby':
            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ª–æ–±–±–∏
            if (data.lobbyData) {
              // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è UI –ª–æ–±–±–∏
              console.log('üéØ [SocketContext] Lobby state restored:', data.lobbyData);
            }
            break;

          case 'idle':
            // –ë–∞–∑–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            console.log('üë§ [SocketContext] Basic state restored:', data.playerData);
            break;
        }
      }
    });

    setSocket(newSocket);
  };

  return (
    <SocketContext.Provider value={{ socket, initSocket }}>
      {children}
    </SocketContext.Provider>
  );
}; 
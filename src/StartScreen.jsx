// src/StartScreen.jsx v14
import WaitModal from './components/WaitModal';
import React, { useEffect, useState, useRef } from 'react';
import { useNavigate } from 'react-router-dom';
import TopUpModal from './components/TopUpModal';
import './StartScreen.css';
import { initSocket, connectSocket, disconnectSocket, createLobby, createInviteWS } from './services/socket';

const StartScreen = () => {
  const [user, setUser] = useState(null);
  const [showTopUpModal, setShowTopUpModal] = useState(false);
  const [showWaitModal, setShowWaitModal] = useState(false);
  const initData = window.Telegram?.WebApp?.initData;
  const navigate = useNavigate();
  const socketRef = useRef(null);
  const telegramId = window.Telegram?.WebApp?.initDataUnsafe?.user?.id?.toString();

  useEffect(() => {
    // –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å–æ–∫–µ—Ç —Å—Ä–∞–∑—É
    const socket = initSocket();
    socketRef.current = socket;

    // –°–Ω–∞—á–∞–ª–∞ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ —Å–ª—É—à–∞—Ç–µ–ª–∏ —Å–æ–±—ã—Ç–∏–π
    socket.on('gameStart', (data) => {
      console.log('‚úÖ Received gameStart event:', data);
      navigate(`/game/${data.session.id}`, { replace: true });
    });

    socket.on('setShowWaitModal', (data) => {
      console.log('üì± Received setShowWaitModal event:', data);
      if (data.show) {
        setShowWaitModal(true);
        if (telegramId) {
          socket.emit('uiState', { 
            state: 'waitModal', 
            telegramId,
            details: { 
              timeLeft: data.ttl,
              isReconnect: true 
            }
          });
        }
      } else {
        setShowWaitModal(false);
      }
    });

    const initializeUI = async () => {
      try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ª–æ–±–±–∏ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        if (telegramId) {
          socket.emit('checkActiveLobby', { telegramId }, (response) => {
            console.log('üîç Checking active lobby response:', response);
            if (response?.lobbyId && response?.ttl > 0) {
              setShowWaitModal(true);
              socket.emit('uiState', { 
                state: 'waitModal', 
                telegramId,
                details: { 
                  timeLeft: response.ttl,
                  isReconnect: true 
                }
              });
            }
          });
        }

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ UI —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å telegramId
        if (telegramId) {
          socket.emit('uiState', { 
            state: 'loader', 
            telegramId,
            details: { progress: 0 }
          });
        }

        const storedUser = localStorage.getItem('user');
        if (storedUser) {
          const parsed = JSON.parse(storedUser);

          if (!parsed.avatar) {
            const tgPhoto = window.Telegram?.WebApp?.initDataUnsafe?.user?.photo_url;
            if (tgPhoto) {
              parsed.avatar = tgPhoto;
            }
          }

          setUser(parsed);
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–ª–∞–≥ showWaitModal
          const shouldShowWaitModal = localStorage.getItem('showWaitModal') === 'true';
          if (shouldShowWaitModal) {
            const ttl = parseInt(localStorage.getItem('lobbyTTL') || '180', 10);
            setShowWaitModal(true);
            
            // –û—á–∏—â–∞–µ–º —Ñ–ª–∞–≥–∏
            localStorage.removeItem('showWaitModal');
            localStorage.removeItem('lobbyTTL');
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ UI —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å telegramId
            if (telegramId) {
              socket.emit('uiState', { 
                state: 'waitModal', 
                telegramId,
                details: { 
                  timeLeft: ttl,
                  isReconnect: true 
                }
              });
            }
          } else {
            // –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–∫–∞–∑ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ —ç–∫—Ä–∞–Ω–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å telegramId
            if (telegramId) {
              socket.emit('uiState', { 
                state: 'startScreen', 
                telegramId,
                details: { 
                  numGames: parsed.numGames, 
                  numWins: parsed.numWins 
                }
              });
            }
          }
        }
      } catch (error) {
        console.error("Failed to initialize UI:", error);
      }
    };

    initializeUI();

    const rawInitData = window.Telegram?.WebApp?.initData;
    if (rawInitData) {
      const clean = new URLSearchParams(rawInitData);
      clean.delete('signature');
      console.log("üßæ Clean initData:", clean.toString());
    }

    return () => {
      if (socketRef.current) {
        socketRef.current.off('gameStart');
        socketRef.current.off('setShowWaitModal');
        if (socketRef.current.connected) {
          socketRef.current.disconnect();
        }
      }
    };
  }, [navigate, telegramId]);

  const handleCancelLobby = async () => {
    const telegramId = window.Telegram?.WebApp?.initDataUnsafe?.user?.id;
    
    if (!telegramId) {
      console.error("‚ùå Missing telegramId for lobby cancellation");
      setShowWaitModal(false);
      return;
    }

    console.log('üîÑ Starting lobby cancellation process for user:', telegramId);

    try {
      const socket = initSocket();
      
      // –°–æ–∑–¥–∞–µ–º Promise –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
      const cancelPromise = new Promise((resolve, reject) => {
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç
        const timeoutId = setTimeout(() => {
          console.error('‚è∞ Lobby cancellation timeout after 5 seconds');
          reject(new Error('Lobby cancellation timeout'));
        }, 5000);

        // –°–ª—É—à–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è
        socket.once('lobbyDeleted', (data) => {
          clearTimeout(timeoutId);
          console.log('‚úÖ Received lobby deletion confirmation:', {
            reason: data.reason,
            timestamp: new Date(data.timestamp).toISOString()
          });
          resolve(data);
        });

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –æ—Ç–º–µ–Ω—ã –ª–æ–±–±–∏
        console.log('üì§ Sending cancelLobby request...');
        socket.emit('cancelLobby', {
          telegramId: telegramId.toString()
        }, (response) => {
          console.log('üì® Received cancelLobby response:', response);
          if (response?.status === 'error') {
            clearTimeout(timeoutId);
            reject(new Error(response.message || 'Failed to cancel lobby'));
          }
        });
      });

      // –ñ–¥–µ–º –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
      console.log('‚è≥ Waiting for server confirmation...');
      await cancelPromise;

      // –¢–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
      console.log('üö´ Closing WaitModal...');
      setShowWaitModal(false);

      // –ò —Ç–æ–ª—å–∫–æ –ø–æ—Ç–æ–º –æ—Ç–∫–ª—é—á–∞–µ–º —Å–æ–∫–µ—Ç
      if (socket.connected) {
        console.log('üîå Disconnecting socket...');
        socket.disconnect();
      }

      console.log('‚úÖ Lobby cancellation process completed successfully');

    } catch (error) {
      console.error('‚ùå Failed to cancel lobby:', {
        error: error.message,
        stack: error.stack
      });
      // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Ç–æ–∂–µ –∑–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
      setShowWaitModal(false);
      alert(error.message || "Failed to cancel lobby");
    }
  };

  const screenWidth = window.innerWidth;
  const containerWidth = (screenWidth / 12) * 10;

  const showEndingGames = user?.numGames >= 9;
  const showStarInfo = user?.numGames >= 11;
  const showTopUp = user?.numGames >= 11 && user?.stars <= 10;
  const disableStart = user?.numGames >= 12 && user?.stars < 10;

  const getEndingText = () => {
    if (user.numGames === 11) {
      return "–£ —Ç–µ–±—è –æ—Å—Ç–∞–ª–∞—Å—å –æ–¥–Ω–∞ –∏–≥—Ä–∞\nYou need to top up your balance";
    }
    if (user.numGames >= 12 && user.stars < 10) {
      return "–°—Ç–æ–∏–º–æ—Å—Ç—å –æ–¥–Ω–æ–π –∏–≥—Ä—ã 10 –∑–≤–µ–∑–¥\nTop up your balance";
    }
    if (user.numGames >= 9 && user.stars <= 10) {
      return "–£ —Ç–µ–±—è –∑–∞–∫–∞–Ω—á–∏–≤–∞—é—Ç—Å—è –∏–≥—Ä—ã\n–ü–æ—Ç–æ–º —Ç–µ–±–µ –ø–æ—Ç—Ä–µ–±—É—é—Ç—Å—è –∑–≤–µ–∑–¥—ã";
    }
    return null;
  };

  const handleStartGame = async () => {
    try {
      const telegramId = window.Telegram?.WebApp?.initDataUnsafe?.user?.id;
      if (!telegramId) {
        throw new Error("Missing Telegram ID");
      }

      // –ü–æ–¥–∫–ª—é—á–∞–µ–º WebSocket
      console.log('üîÑ Connecting to WebSocket...');
      await connectSocket();
      console.log('‚úÖ WebSocket connected successfully');

      // –°–æ–∑–¥–∞–µ–º Promise –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –ª–æ–±–±–∏
      console.log('‚è≥ Setting up lobby ready listener');
      const lobbyReadyPromise = new Promise((resolve, reject) => {
        const socket = initSocket();
        console.log('üîå Socket instance for lobby ready:', socket.id);
        
        let timeoutId = setTimeout(() => {
          console.error('‚ùå Lobby creation timeout. Socket state:', {
            id: socket.id,
            connected: socket.connected,
            disconnected: socket.disconnected
          });
          reject(new Error('Lobby creation timeout'));
        }, 5000);
        
        socket.once('lobbyReady', (data) => {
          clearTimeout(timeoutId);
          console.log('‚úÖ Received lobbyReady event:', data);
          resolve(data);
        });
      });

      // –°–æ–∑–¥–∞–µ–º –ª–æ–±–±–∏ —á–µ—Ä–µ–∑ WebSocket
      console.log('üé≤ Creating lobby...');
      const lobbyResponse = await createLobby(telegramId.toString());
      console.log('üì¶ Lobby creation response:', lobbyResponse);

      // –û–∂–∏–¥–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –ª–æ–±–±–∏
      console.log('‚è≥ Waiting for lobby ready confirmation...');
      await lobbyReadyPromise;
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –æ–∂–∏–¥–∞–Ω–∏—è
      setShowWaitModal(true);
      console.log('üëÅÔ∏è Showing wait modal');

      // –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–≤–∞–π—Ç–∞ —á–µ—Ä–µ–∑ WebSocket
      console.log('üì§ Creating invite via WebSocket...', {
        telegramId,
        timestamp: new Date().toISOString()
      });
      
      const inviteData = await createInviteWS(telegramId.toString());
      console.log('üì¨ Invite created:', {
        ...inviteData,
        timestamp: new Date().toISOString()
      });

      // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ Telegram
      console.log('üì± Preparing to share message via Telegram...', {
        messageId: inviteData.messageId,
        timestamp: new Date().toISOString()
      });
      
      const shareResult = await window.Telegram?.WebApp?.shareMessage(inviteData.messageId);
      console.log('üì® Share message result:', {
        success: true,
        messageId: inviteData.messageId,
        timestamp: new Date().toISOString(),
        shareResult
      });

    } catch (err) {
      console.error('‚ùå Error during game start:', {
        error: err,
        message: err.message,
        timestamp: new Date().toISOString()
      });
      
      setShowWaitModal(false);
      
      // –û—Ç–∫–ª—é—á–∞–µ–º WebSocket –ø—Ä–∏ –æ—à–∏–±–∫–µ
      const socket = initSocket();
      if (socket.connected) {
        console.log('üîå Disconnecting WebSocket due to error');
        disconnectSocket();
      }
      
      alert(err.message || "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ª–æ–±–±–∏");
    }
  };

  if (!user) return null;

  return (
    <div className="start-screen">
      {showWaitModal && <WaitModal onCancel={handleCancelLobby} />}
      <div className="top-logo">
        <img src="../media/3tICO.svg" width={128} alt="Logo" />
      </div>

      <div className="user-info">
        <img className="ava1" src={user.avatar} alt="avatar" />
        <div className="user-data">
          <div className="name1">{user.firstName}</div>
          <div className="stata1">
            Games: <span className="stata2">{user.numGames}</span> Wins: <span className="stata2">{user.numWins}</span>
          </div>
        </div>
      </div>

      {showEndingGames && (
        <div className="ninegames" style={{ width: containerWidth }}>
          <div className="endinggames">{getEndingText()}</div>

          {showStarInfo && (
            <div className="starinfo">
              <div className="balance">Balance</div>
              <div className="star">
                <img src="/media/TGstar.svg" alt="star" />
              </div>
              <div className="starsvalue">{user.stars}</div>
            </div>
          )}

          {showTopUp && (
            <button className="topup" onClick={() => setShowTopUpModal(true)}>
              Top up
            </button>
          )}
        </div>
      )}

      <div
        className="bottom-block"
        style={{
          width: containerWidth,
          opacity: disableStart ? 0.3 : 1,
          pointerEvents: disableStart ? 'none' : 'auto',
        }}
      >
        <div className="call1">
          To start the game by inviting an opponent, just click on this button
        </div>
        {user.numGames >= 12 ? (
          <button
            className="button2"
            onClick={handleStartGame}
            disabled={disableStart}
          >
            Start for 10 stars
          </button>
        ) : (
          <button className="button1" onClick={handleStartGame}>
            Start
          </button>
        )}
      </div>

      {showTopUpModal && <TopUpModal onClose={() => setShowTopUpModal(false)} />}
    </div>
  );
};

export default StartScreen;
